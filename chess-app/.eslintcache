[{"/Users/gauravsharma/Desktop/chess-app/src/index.tsx":"1","/Users/gauravsharma/Desktop/chess-app/src/reportWebVitals.ts":"2","/Users/gauravsharma/Desktop/chess-app/src/App.tsx":"3","/Users/gauravsharma/Desktop/chess-app/src/components/Referee/Referee.tsx":"4","/Users/gauravsharma/Desktop/chess-app/src/Constants.ts":"5","/Users/gauravsharma/Desktop/chess-app/src/Types.ts":"6","/Users/gauravsharma/Desktop/chess-app/src/components/Chessboard/Chessboard.tsx":"7","/Users/gauravsharma/Desktop/chess-app/src/models/index.ts":"8","/Users/gauravsharma/Desktop/chess-app/src/models/Pawn.ts":"9","/Users/gauravsharma/Desktop/chess-app/src/models/Position.ts":"10","/Users/gauravsharma/Desktop/chess-app/src/models/Piece.ts":"11","/Users/gauravsharma/Desktop/chess-app/src/models/Board.ts":"12","/Users/gauravsharma/Desktop/chess-app/src/referee/rules/index.ts":"13","/Users/gauravsharma/Desktop/chess-app/src/components/Tile/Tile.tsx":"14","/Users/gauravsharma/Desktop/chess-app/src/referee/rules/PawnRules.ts":"15","/Users/gauravsharma/Desktop/chess-app/src/referee/rules/BishopRules.ts":"16","/Users/gauravsharma/Desktop/chess-app/src/referee/rules/RookRules.ts":"17","/Users/gauravsharma/Desktop/chess-app/src/referee/rules/KnightRules.ts":"18","/Users/gauravsharma/Desktop/chess-app/src/referee/rules/KingRules.ts":"19","/Users/gauravsharma/Desktop/chess-app/src/referee/rules/QueenRules.ts":"20","/Users/gauravsharma/Desktop/chess-app/src/referee/rules/GeneralRules.ts":"21"},{"size":500,"mtime":1682842897000,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1682842897000,"results":"24","hashOfConfig":"23"},{"size":625,"mtime":1690888871990,"results":"25","hashOfConfig":"23"},{"size":7894,"mtime":1690889748510,"results":"26","hashOfConfig":"23"},{"size":2803,"mtime":1690888993300,"results":"27","hashOfConfig":"23"},{"size":210,"mtime":1682842897000,"results":"28","hashOfConfig":"23"},{"size":4172,"mtime":1690891545661,"results":"29","hashOfConfig":"23"},{"size":52,"mtime":1682842897000,"results":"30","hashOfConfig":"23"},{"size":612,"mtime":1682842897000,"results":"31","hashOfConfig":"23"},{"size":362,"mtime":1682842897000,"results":"32","hashOfConfig":"23"},{"size":1529,"mtime":1682842897000,"results":"33","hashOfConfig":"23"},{"size":7886,"mtime":1690889041196,"results":"34","hashOfConfig":"23"},{"size":178,"mtime":1682842897000,"results":"35","hashOfConfig":"23"},{"size":537,"mtime":1682842897000,"results":"36","hashOfConfig":"23"},{"size":3395,"mtime":1682842897000,"results":"37","hashOfConfig":"23"},{"size":4721,"mtime":1682842897000,"results":"38","hashOfConfig":"23"},{"size":3674,"mtime":1682842897000,"results":"39","hashOfConfig":"23"},{"size":1842,"mtime":1682842897000,"results":"40","hashOfConfig":"23"},{"size":7307,"mtime":1682842897000,"results":"41","hashOfConfig":"23"},{"size":4541,"mtime":1682842897000,"results":"42","hashOfConfig":"23"},{"size":888,"mtime":1682842897000,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"otdob1",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/Users/gauravsharma/Desktop/chess-app/src/index.tsx",[],["88","89"],"/Users/gauravsharma/Desktop/chess-app/src/reportWebVitals.ts",[],"/Users/gauravsharma/Desktop/chess-app/src/App.tsx",[],"/Users/gauravsharma/Desktop/chess-app/src/components/Referee/Referee.tsx",["90","91","92","93","94","95","96","97","98","99","100","101"],"import {useEffect, useRef, useState} from \"react\";\nimport {initialBoard} from \"../../Constants\";\nimport {Piece, Position} from \"../../models\";\nimport {Board} from \"../../models/Board\";\nimport {Pawn} from \"../../models/Pawn\";\nimport {\n    bishopMove,\n    getPossibleBishopMoves,\n    getPossibleKingMoves,\n    getPossibleKnightMoves,\n    getPossiblePawnMoves,\n    getPossibleQueenMoves,\n    getPossibleRookMoves,\n    kingMove,\n    knightMove,\n    pawnMove,\n    queenMove,\n    rookMove\n} from \"../../referee/rules\";\nimport {PieceType, TeamType} from \"../../Types\";\nimport Chessboard from \"../Chessboard/Chessboard\";\n\nexport default function Referee() {\n    const [board, setBoard] = useState<Board>(initialBoard.clone());\n    const [promotionPawn, setPromotionPawn] = useState<Piece>();\n    const modalRef = useRef<HTMLDivElement>(null);\n    const checkmateModalRef = useRef<HTMLDivElement>(null);\n\n    function playMove(playedPiece: Piece, destination: Position): boolean {\n        // If the playing piece doesn't have any moves return\n        if (playedPiece.possibleMoves === undefined) return false;\n\n        // Prevent the inactive team from playing\n        if (playedPiece.team === TeamType.OUR\n            && board.totalTurns % 2 !== 0) return false;\n        if (playedPiece.team === TeamType.OPPONENT\n            && board.totalTurns % 2 !== 1) return false;\n\n        let playedMoveIsValid = false;\n\n        const validMove = playedPiece.possibleMoves?.some(m => m.samePosition(destination));\n\n        if (!validMove) return false;\n\n        const enPassantMove = isEnPassantMove(\n            playedPiece.position,\n            destination,\n            playedPiece.type,\n            playedPiece.team\n        );\n\n        // playMove modifies the board thus we\n        // need to call setBoard\n        setBoard(() => {\n            const clonedBoard = board.clone();\n            clonedBoard.totalTurns += 1;\n            // Playing the move\n            playedMoveIsValid = clonedBoard.playMove(enPassantMove,\n                validMove, playedPiece,\n                destination);\n\n            if (clonedBoard.winningTeam !== undefined) {\n                checkmateModalRef.current?.classList.remove(\"hidden\");\n            }\n\n            return clonedBoard;\n        })\n\n        // This is for promoting a pawn\n        let promotionRow = (playedPiece.team === TeamType.OUR) ? 7 : 0;\n\n        if (destination.y === promotionRow && playedPiece.isPawn) {\n            modalRef.current?.classList.remove(\"hidden\");\n            setPromotionPawn((previousPromotionPawn) => {\n                const clonedPlayedPiece = playedPiece.clone();\n                clonedPlayedPiece.position = destination.clone();\n                return clonedPlayedPiece;\n            });\n        }\n\n        return playedMoveIsValid;\n    }\n\n    function isEnPassantMove(\n        initialPosition: Position,\n        desiredPosition: Position,\n        type: PieceType,\n        team: TeamType\n    ) {\n        const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n        if (type === PieceType.PAWN) {\n            if (\n                (desiredPosition.x - initialPosition.x === -1 ||\n                    desiredPosition.x - initialPosition.x === 1) &&\n                desiredPosition.y - initialPosition.y === pawnDirection\n            ) {\n                const piece = board.pieces.find(\n                    (p) =>\n                        p.position.x === desiredPosition.x &&\n                        p.position.y === desiredPosition.y - pawnDirection &&\n                        p.isPawn &&\n                        (p as Pawn).enPassant\n                );\n                if (piece) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    //TODO\n    //Add stalemate!\n    function isValidMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType) {\n        let validMove = false;\n        switch (type) {\n            case PieceType.PAWN:\n                validMove = pawnMove(initialPosition, desiredPosition, team, board.pieces);\n                break;\n            case PieceType.KNIGHT:\n                validMove = knightMove(initialPosition, desiredPosition, team, board.pieces);\n                break;\n            case PieceType.BISHOP:\n                validMove = bishopMove(initialPosition, desiredPosition, team, board.pieces);\n                break;\n            case PieceType.ROOK:\n                validMove = rookMove(initialPosition, desiredPosition, team, board.pieces);\n                break;\n            case PieceType.QUEEN:\n                validMove = queenMove(initialPosition, desiredPosition, team, board.pieces);\n                break;\n            case PieceType.KING:\n                validMove = kingMove(initialPosition, desiredPosition, team, board.pieces);\n        }\n\n        return validMove;\n    }\n\n    function promotePawn(pieceType: PieceType) {\n        if (promotionPawn === undefined) {\n            return;\n        }\n\n        setBoard((previousBoard) => {\n            const clonedBoard = board.clone();\n            clonedBoard.pieces = clonedBoard.pieces.reduce((results, piece) => {\n                if (piece.samePiecePosition(promotionPawn)) {\n                    results.push(new Piece(piece.position.clone(), pieceType,\n                        piece.team, true));\n                } else {\n                    results.push(piece);\n                }\n                return results;\n            }, [] as Piece[]);\n\n            clonedBoard.calculateAllMoves();\n\n            return clonedBoard;\n        })\n\n        modalRef.current?.classList.add(\"hidden\");\n    }\n\n    function promotionTeamType() {\n        return (promotionPawn?.team === TeamType.OUR) ? \"w\" : \"b\";\n    }\n\n    function restartGame() {\n        checkmateModalRef.current?.classList.add(\"hidden\");\n        setBoard(initialBoard.clone());\n    }\n\n    return (\n        <>\n            <div style={{color: \"black\", fontSize: \"24px\", display: \"flex\", justifyContent: \"center\"}}>\n                <p style={{\n                    margin: 0,\n                    backgroundColor: \"skyblue\",\n                    width: \"max-content\",\n                    padding: \".8rem\",\n                    borderRadius: \"10px\"\n                    }}\n                   onClick={() => {\n                       window.location.reload();\n                   }}\n                >\n                    Restart\n                </p>\n            </div>\n            <p style={{color: \"white\", margin: \"10px\", fontSize: \"24px\", textAlign: \"center\"}}>Total\n                turns: {board.totalTurns}</p>\n            <div className=\"modal hidden\" ref={modalRef}>\n                <div className=\"modal-body\">\n                    <img onClick={() => promotePawn(PieceType.ROOK)}\n                         src={`/assets/images/rook_${promotionTeamType()}.png`}/>\n                    <img onClick={() => promotePawn(PieceType.BISHOP)}\n                         src={`/assets/images/bishop_${promotionTeamType()}.png`}/>\n                    <img onClick={() => promotePawn(PieceType.KNIGHT)}\n                         src={`/assets/images/knight_${promotionTeamType()}.png`}/>\n                    <img onClick={() => promotePawn(PieceType.QUEEN)}\n                         src={`/assets/images/queen_${promotionTeamType()}.png`}/>\n                </div>\n            </div>\n            <div className=\"modal hidden\" ref={checkmateModalRef}>\n                <div className=\"modal-body\">\n                    <div className=\"checkmate-body\">\n                        <span>The winning team is {board.winningTeam === TeamType.OUR ? \"white\" : \"black\"}!</span>\n                        <button onClick={restartGame}>Play again</button>\n                    </div>\n                </div>\n            </div>\n            <Chessboard playMove={playMove}\n                        pieces={board.pieces}/>\n        </>\n    )\n}","/Users/gauravsharma/Desktop/chess-app/src/Constants.ts",[],"/Users/gauravsharma/Desktop/chess-app/src/Types.ts",[],"/Users/gauravsharma/Desktop/chess-app/src/components/Chessboard/Chessboard.tsx",[],"/Users/gauravsharma/Desktop/chess-app/src/models/index.ts",[],"/Users/gauravsharma/Desktop/chess-app/src/models/Pawn.ts",[],"/Users/gauravsharma/Desktop/chess-app/src/models/Position.ts",[],"/Users/gauravsharma/Desktop/chess-app/src/models/Piece.ts",[],"/Users/gauravsharma/Desktop/chess-app/src/models/Board.ts",[],"/Users/gauravsharma/Desktop/chess-app/src/referee/rules/index.ts",[],"/Users/gauravsharma/Desktop/chess-app/src/components/Tile/Tile.tsx",[],"/Users/gauravsharma/Desktop/chess-app/src/referee/rules/PawnRules.ts",[],"/Users/gauravsharma/Desktop/chess-app/src/referee/rules/BishopRules.ts",[],"/Users/gauravsharma/Desktop/chess-app/src/referee/rules/RookRules.ts",[],"/Users/gauravsharma/Desktop/chess-app/src/referee/rules/KnightRules.ts",[],"/Users/gauravsharma/Desktop/chess-app/src/referee/rules/KingRules.ts",[],"/Users/gauravsharma/Desktop/chess-app/src/referee/rules/QueenRules.ts",[],"/Users/gauravsharma/Desktop/chess-app/src/referee/rules/GeneralRules.ts",[],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":9,"nodeType":"108","messageId":"109","endLine":1,"endColumn":18},{"ruleId":"106","severity":1,"message":"110","line":8,"column":5,"nodeType":"108","messageId":"109","endLine":8,"endColumn":27},{"ruleId":"106","severity":1,"message":"111","line":9,"column":5,"nodeType":"108","messageId":"109","endLine":9,"endColumn":25},{"ruleId":"106","severity":1,"message":"112","line":10,"column":5,"nodeType":"108","messageId":"109","endLine":10,"endColumn":27},{"ruleId":"106","severity":1,"message":"113","line":11,"column":5,"nodeType":"108","messageId":"109","endLine":11,"endColumn":25},{"ruleId":"106","severity":1,"message":"114","line":12,"column":5,"nodeType":"108","messageId":"109","endLine":12,"endColumn":26},{"ruleId":"106","severity":1,"message":"115","line":13,"column":5,"nodeType":"108","messageId":"109","endLine":13,"endColumn":25},{"ruleId":"106","severity":1,"message":"116","line":116,"column":14,"nodeType":"108","messageId":"109","endLine":116,"endColumn":25},{"ruleId":"117","severity":1,"message":"118","line":196,"column":21,"nodeType":"119","endLine":197,"endColumn":82},{"ruleId":"117","severity":1,"message":"118","line":198,"column":21,"nodeType":"119","endLine":199,"endColumn":84},{"ruleId":"117","severity":1,"message":"118","line":200,"column":21,"nodeType":"119","endLine":201,"endColumn":84},{"ruleId":"117","severity":1,"message":"118","line":202,"column":21,"nodeType":"119","endLine":203,"endColumn":83},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'getPossibleBishopMoves' is defined but never used.","'getPossibleKingMoves' is defined but never used.","'getPossibleKnightMoves' is defined but never used.","'getPossiblePawnMoves' is defined but never used.","'getPossibleQueenMoves' is defined but never used.","'getPossibleRookMoves' is defined but never used.","'isValidMove' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]